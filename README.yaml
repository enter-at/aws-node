---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: node-aws-lambda-handlers

# Tags of this project
tags:
    - aws
    - aws-lambda
    - nodejs
    - handler
    - typescript
    - npm-package

# Categories of this project
categories:
    - nodejs-modules/supported
    - aws
    - aws-lambda
    - nodejs
    - handler
    - typescript
    - npm-package

# License of this project
license: "APACHE2"

# Canonical GitHub repo
github_repo: enter-at/node-aws-lambda-handlers

# Badges to display
badges:
    - name: "Build Status"
      image: "https://github.com/enter-at/node-aws-lambda-handlers/workflows/Lint%20&%20Test/badge.svg"
      url: "https://github.com/enter-at/node-aws-lambda-handlers/actions"
    - name: "Downloads"
      image: "https://img.shields.io/npm/v/@enter-at/lambda-handlers.svg"
      url: "https://www.npmjs.com/package/@enter-at/lambda-handlers"
    - name: "Install size"
      image: "https://packagephobia.now.sh/badge?p=@enter-at/lambda-handlers"
      url: "https://packagephobia.now.sh/result?p=@enter-at/lambda-handlers"

# Short description of this project
description: |-
    An opinionated Typescript package that facilitates specifying AWS Lambda handlers including input validation,
    error handling and response formatting.

# How to use this project
usage: |-
    ### Example

    ```typescript
    import {APIGatewayProxyHandler, BadRequestError, notFound, ok} from '@enter-at/lambda-handlers';
    import {object, string} from '@hapi/joi';
    import {APIGatewayProxyEvent, APIGatewayProxyResult} from 'aws-lambda';

    const validationSchema = object({
        email: string().email().required()
    });

    export class GetAccountDataAdapter {

        contructor(private service: IService) {}

        @APIGatewayProxyHandler()
        public async handle(event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> {
            try {
                const payload = await this.readPayload(event.queryStringParameters);
                return ok(await this.service.fetch(payload));
            } catch (err) {
                if (err instanceof ResourceNotFoundError) {
                    return notFound(err.message);
                }
                throw err;
            }
        }

        private async validatePayload<T>(parameters: any): Promise<T> {
            try {
                return await validationSchema.validateAsync(parameters, {abortEarly: false});
            } catch (err) {
                throw new BadRequestError(err.details.map((detail: any) => detail.message));
            }
        }
    }

    ```

# Contributors to this project
contributors:
    - name: "Steffen Leistner"
      github: "sleistner"
